import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"

const PianetaInterioreCompleto = () => {
  const [step, setStep] = useState(0);
  const [pianetaPos, setPianetaPos] = useState(null);
  const [nome, setNome] = useState('');
  const [descrizione, setDescrizione] = useState('');
  const [pianeti, setPianeti] = useState([]);
  const [showGallery, setShowGallery] = useState(false);
  const canvasRef = useRef(null);

  const steps = [
    { title: "Il Tuo Universo", content: "Benvenuto nel tuo universo personale. Qui creerai un pianeta che rappresenta il tuo mondo interiore." },
    { title: "Posiziona il Pianeta", content: "Tocca o clicca sulla griglia per posizionare il tuo pianeta. Le coordinate ti aiuteranno a ricordare la posizione." },
    { title: "Nomina il Pianeta", content: "Dai un nome al tuo pianeta. Questo nome rappresenterà l'essenza del tuo mondo interiore." },
    { title: "Descrivi il Mondo", content: "Descrivi il paesaggio e l'atmosfera del tuo pianeta interiore. Sii creativo e introspettivo." },
  ];

  useEffect(() => {
    const savedPianeti = localStorage.getItem('pianeti');
    if (savedPianeti) {
      setPianeti(JSON.parse(savedPianeti));
    }
  }, []);

  useEffect(() => {
    if (step === 1) {
      const canvas = canvasRef.current;
      const ctx = canvas.getContext('2d');
      
      const drawGrid = () => {
        ctx.fillStyle = 'black';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';
        ctx.lineWidth = 1;
        
        for (let x = 0; x <= canvas.width; x += 30) {
          ctx.beginPath();
          ctx.moveTo(x, 0);
          ctx.lineTo(x, canvas.height);
          ctx.stroke();
        }
        
        for (let y = 0; y <= canvas.height; y += 30) {
          ctx.beginPath();
          ctx.moveTo(0, y);
          ctx.lineTo(canvas.width, y);
          ctx.stroke();
        }
      };

      const handleCanvasInteraction = (event) => {
        event.preventDefault();
        const rect = canvas.getBoundingClientRect();
        const clientX = event.touches ? event.touches[0].clientX : event.clientX;
        const clientY = event.touches ? event.touches[0].clientY : event.clientY;
        const x = Math.round((clientX - rect.left) / 30) * 30;
        const y = Math.round((clientY - rect.top) / 30) * 30;
        setPianetaPos({ x, y });

        ctx.clearRect(0, 0, canvas.width, canvas.height);
        drawGrid();
        ctx.beginPath();
        ctx.arc(x, y, 10, 0, 2 * Math.PI, false);
        ctx.fillStyle = 'white';
        ctx.fill();
        ctx.strokeStyle = 'black';
        ctx.lineWidth = 2;
        ctx.stroke();

        ctx.font = '12px Arial';
        ctx.fillStyle = 'white';
        ctx.fillText(`(${x/30}, ${y/30})`, x + 15, y - 15);
      };

      drawGrid();
      canvas.addEventListener('touchstart', handleCanvasInteraction);
      canvas.addEventListener('click', handleCanvasInteraction);
      return () => {
        canvas.removeEventListener('touchstart', handleCanvasInteraction);
        canvas.removeEventListener('click', handleCanvasInteraction);
      };
    }
  }, [step]);

  const handleNext = () => {
    if (step === 1 && !pianetaPos) {
      alert("Per favore, posiziona il tuo pianeta prima di continuare.");
      return;
    }
    if (step === 2 && !nome) {
      alert("Per favore, dai un nome al tuo pianeta prima di continuare.");
      return;
    }
    if (step === 3 && !descrizione) {
      alert("Per favore, descrivi il tuo pianeta prima di continuare.");
      return;
    }
    if (step < steps.length - 1) {
      setStep(step + 1);
    } else {
      const newPianeta = { pianetaPos, nome, descrizione };
      const updatedPianeti = [...pianeti, newPianeta];
      setPianeti(updatedPianeti);
      localStorage.setItem('pianeti', JSON.stringify(updatedPianeti));
      alert("Il tuo Pianeta Interiore è stato creato!");
      resetForm();
    }
  };

  const handleBack = () => {
    if (step > 0) setStep(step - 1);
  };

  const resetForm = () => {
    setStep(0);
    setPianetaPos(null);
    setNome('');
    setDescrizione('');
  };

  const toggleGallery = () => {
    setShowGallery(!showGallery);
  };

  if (showGallery) {
    return (
      <div className="container mx-auto p-4 max-w-md bg-white text-black">
        <h1 className="text-2xl font-bold mb-4">Galleria dei Pianeti Interiori</h1>
        {pianeti.map((pianeta, index) => (
          <Card key={index} className="mb-4 bg-white border-black">
            <CardHeader>
              <CardTitle className="text-black">{pianeta.nome}</CardTitle>
            </CardHeader>
            <CardContent>
              <p>Coordinate: ({pianeta.pianetaPos.x/30}, {pianeta.pianetaPos.y/30})</p>
              <p className="mt-2">{pianeta.descrizione}</p>
            </CardContent>
          </Card>
        ))}
        <Button onClick={toggleGallery} className="mt-4 bg-black text-white w-full">
          Torna alla Creazione
        </Button>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4 max-w-md bg-white text-black">
      <h1 className="text-2xl font-bold mb-4">Pianeta Interiore</h1>
      
      <Card className="bg-white border-black">
        <CardHeader>
          <CardTitle className="text-black">{steps[step].title}</CardTitle>
        </CardHeader>
        <CardContent>
          <p className="mb-4 text-gray-700">{steps[step].content}</p>
          
          {step === 1 && (
            <canvas ref={canvasRef} width={300} height={300} className="border border-black mb-4 touch-none" />
          )}

          {step === 2 && (
            <div className="space-y-4">
              <Label htmlFor="planet-name">Nome del Pianeta</Label>
              <Input
                id="planet-name"
                value={nome}
                onChange={(e) => setNome(e.target.value)}
                placeholder="Inserisci il nome"
                className="border-black"
              />
            </div>
          )}

          {step === 3 && (
            <div className="space-y-4">
              <Label htmlFor="planet-description">Descrizione del Pianeta</Label>
              <Textarea
                id="planet-description"
                value={descrizione}
                onChange={(e) => setDescrizione(e.target.value)}
                placeholder="Descrivi il tuo pianeta interiore..."
                className="border-black"
                rows={6}
              />
            </div>
          )}

          <div className="flex justify-between mt-6">
            <Button onClick={handleBack} disabled={step === 0} variant="outline" className="border-black text-black">
              Indietro
            </Button>
            <Button onClick={handleNext} className="bg-black text-white">
              {step < steps.length - 1 ? "Avanti" : "Completa"}
            </Button>
          </div>
        </CardContent>
      </Card>
      
      <Button onClick={toggleGallery} className="mt-4 bg-black text-white w-full">
        Visualizza Galleria
      </Button>
    </div>
  );
};

export default PianetaInterioreCompleto;
